.program n64_protocol
.side_set 1

.define public T1 1
.define public T2 2
.define public T3 1

.wrap_target
bitloop:
    out x, 1       side 1 [T3 - 1]
    jmp !x do_zero side 0 [T1 - 1]
do_one:
    jmp bitloop    side 0 [T2 - 1]
do_zero:
    nop            side 1 [T2 - 1]
.wrap

% c-sdk {

#include "hardware/clocks.h"

static inline void n64_protocol_program_init(PIO pio, uint sm, uint offset, uint pin, float freq)
{
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = n64_protocol_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 8);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    sm_config_set_mov_status(&c, STATUS_TX_LESSTHAN, 1);

    int cycles_per_bit = n64_protocol_T1 + n64_protocol_T2 + n64_protocol_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}
