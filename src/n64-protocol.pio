.program n64_protocol

.define public T 30

    nop [T]
    nop [T]
    nop [T]
    nop [T]
    nop [T]
    set pindirs, 1
    set x, 31

    ; Write 32 bits
write_bit:
    out pins, 1        [T - 2]
    jmp x--, write_bit

    ; Write stop bit
    set pins, 0 [T - 1]
    set pins, 1 [T - 1]
    
    ; Get ready for reading
    set pindirs, 0

    ; Read indefinitely
.wrap_target
    wait 0 pin 0
    nop [T - 1]
    nop [T - 1]
    in pins, 1
    wait 1 pin 0
.wrap

% c-sdk {

#include "hardware/clocks.h"

static inline void n64_protocol_program_init(PIO pio, uint sm, uint offset, uint pin, float freq)
{
    uint mask = 1U << pin;
    pio_sm_set_pins_with_mask(pio, sm, mask, mask);
    pio_sm_set_pindirs_with_mask(pio, sm, mask, mask);
    pio_gpio_init(pio, pin);

    pio_sm_config c = n64_protocol_program_get_default_config(offset);
    sm_config_set_set_pins(&c, pin, 1);

    sm_config_set_out_pins(&c, pin, 1);
    sm_config_set_out_shift(&c, true, true, 4);

    sm_config_set_in_pins(&c, pin);
    sm_config_set_in_shift(&c, false, true, 8);

    float div = clock_get_hz(clk_sys) / (4 * n64_protocol_T * freq);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

%}
